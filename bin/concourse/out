#!/usr/bin/env ruby
$: << (ENV['is_devel'] ? File.expand_path('../../../lib', __FILE__) : '/opt/lib')
require 'kite/helpers/concourse'

Dir.chdir ARGV[0]
params = Kite::Helpers::Concourse.params(STDIN.read)

Kite::Helpers::Concourse.fatal '`source` missing' unless params['source']

token = params['source']['token'] # kubectl service account token
endpoint = params['source']['endpoint']
cert = params['source']['certificate-authority']
command = params['params']['command']

Kite::Helpers::Concourse.fatal '`command` missing' if command.to_s.empty?

path_certificate = '/tmp/ca.crt'
path_key = '/tmp/key.json'
path_kubeconfig = '/tmp/kubeconfig'

env = {}

File.write(path_certificate, cert)
env['KUBECONFIG'] = path_kubeconfig

Kite::Helpers::Concourse.execute("kubectl config set-cluster concourse " \
                                 "--embed-certs=true --server=#{ endpoint } " \
                                 "--certificate-authority=#{ path_certificate }", env)
Kite::Helpers::Concourse.execute("kubectl config set-credentials concourse --token='#{ token }'", env)
Kite::Helpers::Concourse.execute("kubectl config set-context concourse --cluster=concourse --user=concourse", env)
Kite::Helpers::Concourse.execute("kubectl config use-context concourse", env)

if Kite::Helpers::Concourse.execute(command, env)
  ::Kite::Helpers::Concourse.respond(version: { status: 'ok' })
else
  ::Kite::Helpers::Concourse.respond(
    version: { status: 'error' },
    metadata: ["Failed to execute command #{ command }"]
  )
  exit 1
end
